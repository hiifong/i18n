// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hiifong/i18n/ent/enti18n"
	"github.com/hiifong/i18n/ent/predicate"
)

// EntI18nUpdate is the builder for updating EntI18n entities.
type EntI18nUpdate struct {
	config
	hooks    []Hook
	mutation *EntI18nMutation
}

// Where appends a list predicates to the EntI18nUpdate builder.
func (eiu *EntI18nUpdate) Where(ps ...predicate.EntI18n) *EntI18nUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetLang sets the "lang" field.
func (eiu *EntI18nUpdate) SetLang(s string) *EntI18nUpdate {
	eiu.mutation.SetLang(s)
	return eiu
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (eiu *EntI18nUpdate) SetNillableLang(s *string) *EntI18nUpdate {
	if s != nil {
		eiu.SetLang(*s)
	}
	return eiu
}

// SetKey sets the "key" field.
func (eiu *EntI18nUpdate) SetKey(s string) *EntI18nUpdate {
	eiu.mutation.SetKey(s)
	return eiu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (eiu *EntI18nUpdate) SetNillableKey(s *string) *EntI18nUpdate {
	if s != nil {
		eiu.SetKey(*s)
	}
	return eiu
}

// SetRaw sets the "raw" field.
func (eiu *EntI18nUpdate) SetRaw(s string) *EntI18nUpdate {
	eiu.mutation.SetRaw(s)
	return eiu
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (eiu *EntI18nUpdate) SetNillableRaw(s *string) *EntI18nUpdate {
	if s != nil {
		eiu.SetRaw(*s)
	}
	return eiu
}

// SetDeleted sets the "deleted" field.
func (eiu *EntI18nUpdate) SetDeleted(i int64) *EntI18nUpdate {
	eiu.mutation.ResetDeleted()
	eiu.mutation.SetDeleted(i)
	return eiu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (eiu *EntI18nUpdate) SetNillableDeleted(i *int64) *EntI18nUpdate {
	if i != nil {
		eiu.SetDeleted(*i)
	}
	return eiu
}

// AddDeleted adds i to the "deleted" field.
func (eiu *EntI18nUpdate) AddDeleted(i int64) *EntI18nUpdate {
	eiu.mutation.AddDeleted(i)
	return eiu
}

// ClearDeleted clears the value of the "deleted" field.
func (eiu *EntI18nUpdate) ClearDeleted() *EntI18nUpdate {
	eiu.mutation.ClearDeleted()
	return eiu
}

// Mutation returns the EntI18nMutation object of the builder.
func (eiu *EntI18nUpdate) Mutation() *EntI18nMutation {
	return eiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *EntI18nUpdate) Save(ctx context.Context) (int, error) {
	eiu.defaults()
	return withHooks(ctx, eiu.sqlSave, eiu.mutation, eiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *EntI18nUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *EntI18nUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *EntI18nUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiu *EntI18nUpdate) defaults() {
	if _, ok := eiu.mutation.Updated(); !ok {
		v := enti18n.UpdateDefaultUpdated()
		eiu.mutation.SetUpdated(v)
	}
}

func (eiu *EntI18nUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enti18n.Table, enti18n.Columns, sqlgraph.NewFieldSpec(enti18n.FieldID, field.TypeInt64))
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.Lang(); ok {
		_spec.SetField(enti18n.FieldLang, field.TypeString, value)
	}
	if value, ok := eiu.mutation.Key(); ok {
		_spec.SetField(enti18n.FieldKey, field.TypeString, value)
	}
	if value, ok := eiu.mutation.Raw(); ok {
		_spec.SetField(enti18n.FieldRaw, field.TypeString, value)
	}
	if value, ok := eiu.mutation.Updated(); ok {
		_spec.SetField(enti18n.FieldUpdated, field.TypeInt64, value)
	}
	if value, ok := eiu.mutation.AddedUpdated(); ok {
		_spec.AddField(enti18n.FieldUpdated, field.TypeInt64, value)
	}
	if value, ok := eiu.mutation.Deleted(); ok {
		_spec.SetField(enti18n.FieldDeleted, field.TypeInt64, value)
	}
	if value, ok := eiu.mutation.AddedDeleted(); ok {
		_spec.AddField(enti18n.FieldDeleted, field.TypeInt64, value)
	}
	if eiu.mutation.DeletedCleared() {
		_spec.ClearField(enti18n.FieldDeleted, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enti18n.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eiu.mutation.done = true
	return n, nil
}

// EntI18nUpdateOne is the builder for updating a single EntI18n entity.
type EntI18nUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntI18nMutation
}

// SetLang sets the "lang" field.
func (eiuo *EntI18nUpdateOne) SetLang(s string) *EntI18nUpdateOne {
	eiuo.mutation.SetLang(s)
	return eiuo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (eiuo *EntI18nUpdateOne) SetNillableLang(s *string) *EntI18nUpdateOne {
	if s != nil {
		eiuo.SetLang(*s)
	}
	return eiuo
}

// SetKey sets the "key" field.
func (eiuo *EntI18nUpdateOne) SetKey(s string) *EntI18nUpdateOne {
	eiuo.mutation.SetKey(s)
	return eiuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (eiuo *EntI18nUpdateOne) SetNillableKey(s *string) *EntI18nUpdateOne {
	if s != nil {
		eiuo.SetKey(*s)
	}
	return eiuo
}

// SetRaw sets the "raw" field.
func (eiuo *EntI18nUpdateOne) SetRaw(s string) *EntI18nUpdateOne {
	eiuo.mutation.SetRaw(s)
	return eiuo
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (eiuo *EntI18nUpdateOne) SetNillableRaw(s *string) *EntI18nUpdateOne {
	if s != nil {
		eiuo.SetRaw(*s)
	}
	return eiuo
}

// SetDeleted sets the "deleted" field.
func (eiuo *EntI18nUpdateOne) SetDeleted(i int64) *EntI18nUpdateOne {
	eiuo.mutation.ResetDeleted()
	eiuo.mutation.SetDeleted(i)
	return eiuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (eiuo *EntI18nUpdateOne) SetNillableDeleted(i *int64) *EntI18nUpdateOne {
	if i != nil {
		eiuo.SetDeleted(*i)
	}
	return eiuo
}

// AddDeleted adds i to the "deleted" field.
func (eiuo *EntI18nUpdateOne) AddDeleted(i int64) *EntI18nUpdateOne {
	eiuo.mutation.AddDeleted(i)
	return eiuo
}

// ClearDeleted clears the value of the "deleted" field.
func (eiuo *EntI18nUpdateOne) ClearDeleted() *EntI18nUpdateOne {
	eiuo.mutation.ClearDeleted()
	return eiuo
}

// Mutation returns the EntI18nMutation object of the builder.
func (eiuo *EntI18nUpdateOne) Mutation() *EntI18nMutation {
	return eiuo.mutation
}

// Where appends a list predicates to the EntI18nUpdate builder.
func (eiuo *EntI18nUpdateOne) Where(ps ...predicate.EntI18n) *EntI18nUpdateOne {
	eiuo.mutation.Where(ps...)
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *EntI18nUpdateOne) Select(field string, fields ...string) *EntI18nUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated EntI18n entity.
func (eiuo *EntI18nUpdateOne) Save(ctx context.Context) (*EntI18n, error) {
	eiuo.defaults()
	return withHooks(ctx, eiuo.sqlSave, eiuo.mutation, eiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *EntI18nUpdateOne) SaveX(ctx context.Context) *EntI18n {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *EntI18nUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *EntI18nUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiuo *EntI18nUpdateOne) defaults() {
	if _, ok := eiuo.mutation.Updated(); !ok {
		v := enti18n.UpdateDefaultUpdated()
		eiuo.mutation.SetUpdated(v)
	}
}

func (eiuo *EntI18nUpdateOne) sqlSave(ctx context.Context) (_node *EntI18n, err error) {
	_spec := sqlgraph.NewUpdateSpec(enti18n.Table, enti18n.Columns, sqlgraph.NewFieldSpec(enti18n.FieldID, field.TypeInt64))
	id, ok := eiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntI18n.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enti18n.FieldID)
		for _, f := range fields {
			if !enti18n.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enti18n.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.Lang(); ok {
		_spec.SetField(enti18n.FieldLang, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.Key(); ok {
		_spec.SetField(enti18n.FieldKey, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.Raw(); ok {
		_spec.SetField(enti18n.FieldRaw, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.Updated(); ok {
		_spec.SetField(enti18n.FieldUpdated, field.TypeInt64, value)
	}
	if value, ok := eiuo.mutation.AddedUpdated(); ok {
		_spec.AddField(enti18n.FieldUpdated, field.TypeInt64, value)
	}
	if value, ok := eiuo.mutation.Deleted(); ok {
		_spec.SetField(enti18n.FieldDeleted, field.TypeInt64, value)
	}
	if value, ok := eiuo.mutation.AddedDeleted(); ok {
		_spec.AddField(enti18n.FieldDeleted, field.TypeInt64, value)
	}
	if eiuo.mutation.DeletedCleared() {
		_spec.ClearField(enti18n.FieldDeleted, field.TypeInt64)
	}
	_node = &EntI18n{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enti18n.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eiuo.mutation.done = true
	return _node, nil
}
