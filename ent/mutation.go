// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hiifong/i18n/ent/enti18n"
	"github.com/hiifong/i18n/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntI18n = "EntI18n"
)

// EntI18nMutation represents an operation that mutates the EntI18n nodes in the graph.
type EntI18nMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	lang          *string
	key           *string
	raw           *string
	created       *int64
	addcreated    *int64
	updated       *int64
	addupdated    *int64
	deleted       *int64
	adddeleted    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EntI18n, error)
	predicates    []predicate.EntI18n
}

var _ ent.Mutation = (*EntI18nMutation)(nil)

// enti18nOption allows management of the mutation configuration using functional options.
type enti18nOption func(*EntI18nMutation)

// newEntI18nMutation creates new mutation for the EntI18n entity.
func newEntI18nMutation(c config, op Op, opts ...enti18nOption) *EntI18nMutation {
	m := &EntI18nMutation{
		config:        c,
		op:            op,
		typ:           TypeEntI18n,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntI18nID sets the ID field of the mutation.
func withEntI18nID(id int64) enti18nOption {
	return func(m *EntI18nMutation) {
		var (
			err   error
			once  sync.Once
			value *EntI18n
		)
		m.oldValue = func(ctx context.Context) (*EntI18n, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntI18n.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntI18n sets the old EntI18n of the mutation.
func withEntI18n(node *EntI18n) enti18nOption {
	return func(m *EntI18nMutation) {
		m.oldValue = func(context.Context) (*EntI18n, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntI18nMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntI18nMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EntI18n entities.
func (m *EntI18nMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntI18nMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntI18nMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntI18n.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLang sets the "lang" field.
func (m *EntI18nMutation) SetLang(s string) {
	m.lang = &s
}

// Lang returns the value of the "lang" field in the mutation.
func (m *EntI18nMutation) Lang() (r string, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ResetLang resets all changes to the "lang" field.
func (m *EntI18nMutation) ResetLang() {
	m.lang = nil
}

// SetKey sets the "key" field.
func (m *EntI18nMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *EntI18nMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *EntI18nMutation) ResetKey() {
	m.key = nil
}

// SetRaw sets the "raw" field.
func (m *EntI18nMutation) SetRaw(s string) {
	m.raw = &s
}

// Raw returns the value of the "raw" field in the mutation.
func (m *EntI18nMutation) Raw() (r string, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *EntI18nMutation) ResetRaw() {
	m.raw = nil
}

// SetCreated sets the "created" field.
func (m *EntI18nMutation) SetCreated(i int64) {
	m.created = &i
	m.addcreated = nil
}

// Created returns the value of the "created" field in the mutation.
func (m *EntI18nMutation) Created() (r int64, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldCreated(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// AddCreated adds i to the "created" field.
func (m *EntI18nMutation) AddCreated(i int64) {
	if m.addcreated != nil {
		*m.addcreated += i
	} else {
		m.addcreated = &i
	}
}

// AddedCreated returns the value that was added to the "created" field in this mutation.
func (m *EntI18nMutation) AddedCreated() (r int64, exists bool) {
	v := m.addcreated
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreated resets all changes to the "created" field.
func (m *EntI18nMutation) ResetCreated() {
	m.created = nil
	m.addcreated = nil
}

// SetUpdated sets the "updated" field.
func (m *EntI18nMutation) SetUpdated(i int64) {
	m.updated = &i
	m.addupdated = nil
}

// Updated returns the value of the "updated" field in the mutation.
func (m *EntI18nMutation) Updated() (r int64, exists bool) {
	v := m.updated
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdated returns the old "updated" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldUpdated(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdated: %w", err)
	}
	return oldValue.Updated, nil
}

// AddUpdated adds i to the "updated" field.
func (m *EntI18nMutation) AddUpdated(i int64) {
	if m.addupdated != nil {
		*m.addupdated += i
	} else {
		m.addupdated = &i
	}
}

// AddedUpdated returns the value that was added to the "updated" field in this mutation.
func (m *EntI18nMutation) AddedUpdated() (r int64, exists bool) {
	v := m.addupdated
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdated resets all changes to the "updated" field.
func (m *EntI18nMutation) ResetUpdated() {
	m.updated = nil
	m.addupdated = nil
}

// SetDeleted sets the "deleted" field.
func (m *EntI18nMutation) SetDeleted(i int64) {
	m.deleted = &i
	m.adddeleted = nil
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *EntI18nMutation) Deleted() (r int64, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the EntI18n entity.
// If the EntI18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntI18nMutation) OldDeleted(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// AddDeleted adds i to the "deleted" field.
func (m *EntI18nMutation) AddDeleted(i int64) {
	if m.adddeleted != nil {
		*m.adddeleted += i
	} else {
		m.adddeleted = &i
	}
}

// AddedDeleted returns the value that was added to the "deleted" field in this mutation.
func (m *EntI18nMutation) AddedDeleted() (r int64, exists bool) {
	v := m.adddeleted
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleted clears the value of the "deleted" field.
func (m *EntI18nMutation) ClearDeleted() {
	m.deleted = nil
	m.adddeleted = nil
	m.clearedFields[enti18n.FieldDeleted] = struct{}{}
}

// DeletedCleared returns if the "deleted" field was cleared in this mutation.
func (m *EntI18nMutation) DeletedCleared() bool {
	_, ok := m.clearedFields[enti18n.FieldDeleted]
	return ok
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *EntI18nMutation) ResetDeleted() {
	m.deleted = nil
	m.adddeleted = nil
	delete(m.clearedFields, enti18n.FieldDeleted)
}

// Where appends a list predicates to the EntI18nMutation builder.
func (m *EntI18nMutation) Where(ps ...predicate.EntI18n) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntI18nMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntI18nMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntI18n, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntI18nMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntI18nMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntI18n).
func (m *EntI18nMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntI18nMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.lang != nil {
		fields = append(fields, enti18n.FieldLang)
	}
	if m.key != nil {
		fields = append(fields, enti18n.FieldKey)
	}
	if m.raw != nil {
		fields = append(fields, enti18n.FieldRaw)
	}
	if m.created != nil {
		fields = append(fields, enti18n.FieldCreated)
	}
	if m.updated != nil {
		fields = append(fields, enti18n.FieldUpdated)
	}
	if m.deleted != nil {
		fields = append(fields, enti18n.FieldDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntI18nMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enti18n.FieldLang:
		return m.Lang()
	case enti18n.FieldKey:
		return m.Key()
	case enti18n.FieldRaw:
		return m.Raw()
	case enti18n.FieldCreated:
		return m.Created()
	case enti18n.FieldUpdated:
		return m.Updated()
	case enti18n.FieldDeleted:
		return m.Deleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntI18nMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enti18n.FieldLang:
		return m.OldLang(ctx)
	case enti18n.FieldKey:
		return m.OldKey(ctx)
	case enti18n.FieldRaw:
		return m.OldRaw(ctx)
	case enti18n.FieldCreated:
		return m.OldCreated(ctx)
	case enti18n.FieldUpdated:
		return m.OldUpdated(ctx)
	case enti18n.FieldDeleted:
		return m.OldDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown EntI18n field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntI18nMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enti18n.FieldLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case enti18n.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case enti18n.FieldRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	case enti18n.FieldCreated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case enti18n.FieldUpdated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdated(v)
		return nil
	case enti18n.FieldDeleted:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown EntI18n field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntI18nMutation) AddedFields() []string {
	var fields []string
	if m.addcreated != nil {
		fields = append(fields, enti18n.FieldCreated)
	}
	if m.addupdated != nil {
		fields = append(fields, enti18n.FieldUpdated)
	}
	if m.adddeleted != nil {
		fields = append(fields, enti18n.FieldDeleted)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntI18nMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enti18n.FieldCreated:
		return m.AddedCreated()
	case enti18n.FieldUpdated:
		return m.AddedUpdated()
	case enti18n.FieldDeleted:
		return m.AddedDeleted()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntI18nMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enti18n.FieldCreated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreated(v)
		return nil
	case enti18n.FieldUpdated:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdated(v)
		return nil
	case enti18n.FieldDeleted:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown EntI18n numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntI18nMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enti18n.FieldDeleted) {
		fields = append(fields, enti18n.FieldDeleted)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntI18nMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntI18nMutation) ClearField(name string) error {
	switch name {
	case enti18n.FieldDeleted:
		m.ClearDeleted()
		return nil
	}
	return fmt.Errorf("unknown EntI18n nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntI18nMutation) ResetField(name string) error {
	switch name {
	case enti18n.FieldLang:
		m.ResetLang()
		return nil
	case enti18n.FieldKey:
		m.ResetKey()
		return nil
	case enti18n.FieldRaw:
		m.ResetRaw()
		return nil
	case enti18n.FieldCreated:
		m.ResetCreated()
		return nil
	case enti18n.FieldUpdated:
		m.ResetUpdated()
		return nil
	case enti18n.FieldDeleted:
		m.ResetDeleted()
		return nil
	}
	return fmt.Errorf("unknown EntI18n field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntI18nMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntI18nMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntI18nMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntI18nMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntI18nMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntI18nMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntI18nMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EntI18n unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntI18nMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EntI18n edge %s", name)
}
