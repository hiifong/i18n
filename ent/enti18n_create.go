// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hiifong/i18n/ent/enti18n"
)

// EntI18nCreate is the builder for creating a EntI18n entity.
type EntI18nCreate struct {
	config
	mutation *EntI18nMutation
	hooks    []Hook
}

// SetLang sets the "lang" field.
func (eic *EntI18nCreate) SetLang(s string) *EntI18nCreate {
	eic.mutation.SetLang(s)
	return eic
}

// SetKey sets the "key" field.
func (eic *EntI18nCreate) SetKey(s string) *EntI18nCreate {
	eic.mutation.SetKey(s)
	return eic
}

// SetRaw sets the "raw" field.
func (eic *EntI18nCreate) SetRaw(s string) *EntI18nCreate {
	eic.mutation.SetRaw(s)
	return eic
}

// SetCreated sets the "created" field.
func (eic *EntI18nCreate) SetCreated(i int64) *EntI18nCreate {
	eic.mutation.SetCreated(i)
	return eic
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (eic *EntI18nCreate) SetNillableCreated(i *int64) *EntI18nCreate {
	if i != nil {
		eic.SetCreated(*i)
	}
	return eic
}

// SetUpdated sets the "updated" field.
func (eic *EntI18nCreate) SetUpdated(i int64) *EntI18nCreate {
	eic.mutation.SetUpdated(i)
	return eic
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (eic *EntI18nCreate) SetNillableUpdated(i *int64) *EntI18nCreate {
	if i != nil {
		eic.SetUpdated(*i)
	}
	return eic
}

// SetDeleted sets the "deleted" field.
func (eic *EntI18nCreate) SetDeleted(i int64) *EntI18nCreate {
	eic.mutation.SetDeleted(i)
	return eic
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (eic *EntI18nCreate) SetNillableDeleted(i *int64) *EntI18nCreate {
	if i != nil {
		eic.SetDeleted(*i)
	}
	return eic
}

// SetID sets the "id" field.
func (eic *EntI18nCreate) SetID(i int64) *EntI18nCreate {
	eic.mutation.SetID(i)
	return eic
}

// Mutation returns the EntI18nMutation object of the builder.
func (eic *EntI18nCreate) Mutation() *EntI18nMutation {
	return eic.mutation
}

// Save creates the EntI18n in the database.
func (eic *EntI18nCreate) Save(ctx context.Context) (*EntI18n, error) {
	eic.defaults()
	return withHooks(ctx, eic.sqlSave, eic.mutation, eic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eic *EntI18nCreate) SaveX(ctx context.Context) *EntI18n {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *EntI18nCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *EntI18nCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *EntI18nCreate) defaults() {
	if _, ok := eic.mutation.Created(); !ok {
		v := enti18n.DefaultCreated()
		eic.mutation.SetCreated(v)
	}
	if _, ok := eic.mutation.Updated(); !ok {
		v := enti18n.DefaultUpdated()
		eic.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *EntI18nCreate) check() error {
	if _, ok := eic.mutation.Lang(); !ok {
		return &ValidationError{Name: "lang", err: errors.New(`ent: missing required field "EntI18n.lang"`)}
	}
	if _, ok := eic.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "EntI18n.key"`)}
	}
	if _, ok := eic.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`ent: missing required field "EntI18n.raw"`)}
	}
	if _, ok := eic.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "EntI18n.created"`)}
	}
	if _, ok := eic.mutation.Updated(); !ok {
		return &ValidationError{Name: "updated", err: errors.New(`ent: missing required field "EntI18n.updated"`)}
	}
	return nil
}

func (eic *EntI18nCreate) sqlSave(ctx context.Context) (*EntI18n, error) {
	if err := eic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	eic.mutation.id = &_node.ID
	eic.mutation.done = true
	return _node, nil
}

func (eic *EntI18nCreate) createSpec() (*EntI18n, *sqlgraph.CreateSpec) {
	var (
		_node = &EntI18n{config: eic.config}
		_spec = sqlgraph.NewCreateSpec(enti18n.Table, sqlgraph.NewFieldSpec(enti18n.FieldID, field.TypeInt64))
	)
	if id, ok := eic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eic.mutation.Lang(); ok {
		_spec.SetField(enti18n.FieldLang, field.TypeString, value)
		_node.Lang = value
	}
	if value, ok := eic.mutation.Key(); ok {
		_spec.SetField(enti18n.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := eic.mutation.Raw(); ok {
		_spec.SetField(enti18n.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	if value, ok := eic.mutation.Created(); ok {
		_spec.SetField(enti18n.FieldCreated, field.TypeInt64, value)
		_node.Created = value
	}
	if value, ok := eic.mutation.Updated(); ok {
		_spec.SetField(enti18n.FieldUpdated, field.TypeInt64, value)
		_node.Updated = value
	}
	if value, ok := eic.mutation.Deleted(); ok {
		_spec.SetField(enti18n.FieldDeleted, field.TypeInt64, value)
		_node.Deleted = &value
	}
	return _node, _spec
}

// EntI18nCreateBulk is the builder for creating many EntI18n entities in bulk.
type EntI18nCreateBulk struct {
	config
	err      error
	builders []*EntI18nCreate
}

// Save creates the EntI18n entities in the database.
func (eicb *EntI18nCreateBulk) Save(ctx context.Context) ([]*EntI18n, error) {
	if eicb.err != nil {
		return nil, eicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*EntI18n, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntI18nMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *EntI18nCreateBulk) SaveX(ctx context.Context) []*EntI18n {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *EntI18nCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *EntI18nCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}
