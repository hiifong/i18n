// Code generated by ent, DO NOT EDIT.

package enti18n

import (
	"entgo.io/ent/dialect/sql"
	"github.com/hiifong/i18n/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldID, id))
}

// Lang applies equality check predicate on the "lang" field. It's identical to LangEQ.
func Lang(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldLang, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldKey, v))
}

// Raw applies equality check predicate on the "raw" field. It's identical to RawEQ.
func Raw(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldRaw, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldCreated, v))
}

// Updated applies equality check predicate on the "updated" field. It's identical to UpdatedEQ.
func Updated(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldUpdated, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldDeleted, v))
}

// LangEQ applies the EQ predicate on the "lang" field.
func LangEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldLang, v))
}

// LangNEQ applies the NEQ predicate on the "lang" field.
func LangNEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldLang, v))
}

// LangIn applies the In predicate on the "lang" field.
func LangIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldLang, vs...))
}

// LangNotIn applies the NotIn predicate on the "lang" field.
func LangNotIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldLang, vs...))
}

// LangGT applies the GT predicate on the "lang" field.
func LangGT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldLang, v))
}

// LangGTE applies the GTE predicate on the "lang" field.
func LangGTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldLang, v))
}

// LangLT applies the LT predicate on the "lang" field.
func LangLT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldLang, v))
}

// LangLTE applies the LTE predicate on the "lang" field.
func LangLTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldLang, v))
}

// LangContains applies the Contains predicate on the "lang" field.
func LangContains(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContains(FieldLang, v))
}

// LangHasPrefix applies the HasPrefix predicate on the "lang" field.
func LangHasPrefix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasPrefix(FieldLang, v))
}

// LangHasSuffix applies the HasSuffix predicate on the "lang" field.
func LangHasSuffix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasSuffix(FieldLang, v))
}

// LangEqualFold applies the EqualFold predicate on the "lang" field.
func LangEqualFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEqualFold(FieldLang, v))
}

// LangContainsFold applies the ContainsFold predicate on the "lang" field.
func LangContainsFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContainsFold(FieldLang, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContainsFold(FieldKey, v))
}

// RawEQ applies the EQ predicate on the "raw" field.
func RawEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldRaw, v))
}

// RawNEQ applies the NEQ predicate on the "raw" field.
func RawNEQ(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldRaw, v))
}

// RawIn applies the In predicate on the "raw" field.
func RawIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldRaw, vs...))
}

// RawNotIn applies the NotIn predicate on the "raw" field.
func RawNotIn(vs ...string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldRaw, vs...))
}

// RawGT applies the GT predicate on the "raw" field.
func RawGT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldRaw, v))
}

// RawGTE applies the GTE predicate on the "raw" field.
func RawGTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldRaw, v))
}

// RawLT applies the LT predicate on the "raw" field.
func RawLT(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldRaw, v))
}

// RawLTE applies the LTE predicate on the "raw" field.
func RawLTE(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldRaw, v))
}

// RawContains applies the Contains predicate on the "raw" field.
func RawContains(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContains(FieldRaw, v))
}

// RawHasPrefix applies the HasPrefix predicate on the "raw" field.
func RawHasPrefix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasPrefix(FieldRaw, v))
}

// RawHasSuffix applies the HasSuffix predicate on the "raw" field.
func RawHasSuffix(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldHasSuffix(FieldRaw, v))
}

// RawEqualFold applies the EqualFold predicate on the "raw" field.
func RawEqualFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEqualFold(FieldRaw, v))
}

// RawContainsFold applies the ContainsFold predicate on the "raw" field.
func RawContainsFold(v string) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldContainsFold(FieldRaw, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldCreated, v))
}

// UpdatedEQ applies the EQ predicate on the "updated" field.
func UpdatedEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldUpdated, v))
}

// UpdatedNEQ applies the NEQ predicate on the "updated" field.
func UpdatedNEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldUpdated, v))
}

// UpdatedIn applies the In predicate on the "updated" field.
func UpdatedIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldUpdated, vs...))
}

// UpdatedNotIn applies the NotIn predicate on the "updated" field.
func UpdatedNotIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldUpdated, vs...))
}

// UpdatedGT applies the GT predicate on the "updated" field.
func UpdatedGT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldUpdated, v))
}

// UpdatedGTE applies the GTE predicate on the "updated" field.
func UpdatedGTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldUpdated, v))
}

// UpdatedLT applies the LT predicate on the "updated" field.
func UpdatedLT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldUpdated, v))
}

// UpdatedLTE applies the LTE predicate on the "updated" field.
func UpdatedLTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldUpdated, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int64) predicate.EntI18n {
	return predicate.EntI18n(sql.FieldLTE(FieldDeleted, v))
}

// DeletedIsNil applies the IsNil predicate on the "deleted" field.
func DeletedIsNil() predicate.EntI18n {
	return predicate.EntI18n(sql.FieldIsNull(FieldDeleted))
}

// DeletedNotNil applies the NotNil predicate on the "deleted" field.
func DeletedNotNil() predicate.EntI18n {
	return predicate.EntI18n(sql.FieldNotNull(FieldDeleted))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntI18n) predicate.EntI18n {
	return predicate.EntI18n(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntI18n) predicate.EntI18n {
	return predicate.EntI18n(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntI18n) predicate.EntI18n {
	return predicate.EntI18n(sql.NotPredicates(p))
}
