// Code generated by ent, DO NOT EDIT.

package enti18n

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the enti18n type in the database.
	Label = "ent_i18n"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldRaw holds the string denoting the raw field in the database.
	FieldRaw = "raw"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// Table holds the table name of the enti18n in the database.
	Table = "i18n"
)

// Columns holds all SQL columns for enti18n fields.
var Columns = []string{
	FieldID,
	FieldLang,
	FieldKey,
	FieldRaw,
	FieldCreated,
	FieldUpdated,
	FieldDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() int64
	// DefaultUpdated holds the default value on creation for the "updated" field.
	DefaultUpdated func() int64
	// UpdateDefaultUpdated holds the default value on update for the "updated" field.
	UpdateDefaultUpdated func() int64
)

// OrderOption defines the ordering options for the EntI18n queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLang orders the results by the lang field.
func ByLang(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLang, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByRaw orders the results by the raw field.
func ByRaw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRaw, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByUpdated orders the results by the updated field.
func ByUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdated, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}
