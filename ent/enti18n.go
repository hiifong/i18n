// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hiifong/i18n/ent/enti18n"
)

// EntI18n is the model entity for the EntI18n schema.
type EntI18n struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang string `json:"lang,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw string `json:"raw,omitempty"`
	// Created holds the value of the "created" field.
	Created int64 `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated int64 `json:"updated,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted      *int64 `json:"deleted,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntI18n) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enti18n.FieldID, enti18n.FieldCreated, enti18n.FieldUpdated, enti18n.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case enti18n.FieldLang, enti18n.FieldKey, enti18n.FieldRaw:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntI18n fields.
func (ei *EntI18n) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enti18n.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ei.ID = int64(value.Int64)
		case enti18n.FieldLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value.Valid {
				ei.Lang = value.String
			}
		case enti18n.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ei.Key = value.String
			}
		case enti18n.FieldRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value.Valid {
				ei.Raw = value.String
			}
		case enti18n.FieldCreated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				ei.Created = value.Int64
			}
		case enti18n.FieldUpdated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				ei.Updated = value.Int64
			}
		case enti18n.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				ei.Deleted = new(int64)
				*ei.Deleted = value.Int64
			}
		default:
			ei.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntI18n.
// This includes values selected through modifiers, order, etc.
func (ei *EntI18n) Value(name string) (ent.Value, error) {
	return ei.selectValues.Get(name)
}

// Update returns a builder for updating this EntI18n.
// Note that you need to call EntI18n.Unwrap() before calling this method if this EntI18n
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *EntI18n) Update() *EntI18nUpdateOne {
	return NewEntI18nClient(ei.config).UpdateOne(ei)
}

// Unwrap unwraps the EntI18n entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *EntI18n) Unwrap() *EntI18n {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntI18n is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *EntI18n) String() string {
	var builder strings.Builder
	builder.WriteString("EntI18n(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ei.ID))
	builder.WriteString("lang=")
	builder.WriteString(ei.Lang)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(ei.Key)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(ei.Raw)
	builder.WriteString(", ")
	builder.WriteString("created=")
	builder.WriteString(fmt.Sprintf("%v", ei.Created))
	builder.WriteString(", ")
	builder.WriteString("updated=")
	builder.WriteString(fmt.Sprintf("%v", ei.Updated))
	builder.WriteString(", ")
	if v := ei.Deleted; v != nil {
		builder.WriteString("deleted=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EntI18ns is a parsable slice of EntI18n.
type EntI18ns []*EntI18n
